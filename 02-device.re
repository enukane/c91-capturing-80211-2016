= Raspberry Pi で作るキャプチャ箱

本章では、様々なイベント会場に持って行けるキャプチャ箱について
その要件から実際に作って運用しているものを解説します。

== キャプチャ箱に必要なこと

イベント無線 LAN 環境に持っていくために、以下にあげる要望を満たせるように
キャプチャ箱を作るのがよさそうです。

: 1. コンパクトさ
  鞄の中に入れて携行できる程度のサイズと重さであること
: 2. キャプチャ箱として独立していること
  必要な操作、電源、通信などが箱単体で可能であること
: 3. 6〜8時間程度のキャプチャが継続できること
  電源が持続すること、ストレージ容量が十分に割当たっていること
: 4. あまり高くないこと
  破損しても紛失しても泣かないくらいのお値段感であること
: 5. できるだけありふれたパーツを使うこと
  ハードウェアとして入手しやすいこと、ソフトウェアとして OSS など手を入れやすく誰でもアクセスできるものを使うこと

== 全体の構成

これに沿うように作ってみたのが @<img>{device-topview} にあるデバイスです。

//image[device-topview][キャプチャデバイスの外観][scale=0.6]

ハードウェアとしては Raspberry Pi、モバイルバッテリー(USB Type-A 2口)、USB Wi-Fi アダプタ、
USB 3G/LTE アダプタ、液晶ディスプレイおよび間のUSBケーブルから構成されます。
ソフトウェアコンポーネントも合わせた全体の構成は @<img>{device-overview} に
ある通りです。

//image[device-overview][コンポーネントの構成][scale=1.75]

#@# ハブは BSH4AE06

== Raspberry Pi の利用

802.11 フレームのキャプチャをするには、現状 Linux で wireshark (tshark)
を用いるのが手軽です。このための基盤となる適当なハードウェアを探す必要があります。
ここでは Raspberry Pi をベースに構築をしました。


その他のデバイスにも候補はありますが、電源供給がモバイルバッテリーからできたり
と手軽であり、Web上に拡張のノウハウがたくさんあり、1台5000円と価格も安く、
日本でも入手しやすいことから Raspberry Pi に落ち着いています。
@<table>{device-candidate}はその他、検証済みまたは候補として検討中のデバイス一覧です。
なおタブレットやノートPCといった数万円以上になりそうな
ものについては対象から外しています。
今のところ、電源およびUIの問題はあるものの市販 AP に OpenWRT を入れて
複数周波数帯同時キャプチャというのが面白そうです。

//imgtable[device-candidate][デバイス候補として検討したもの、しているもの]{
//}

#@# ===[notoc] 1. Androidスマートフォン・タブレット
#@# ====[notoc] pros
#@#   * 802.11 パケットキャプチャ用にアプリ(Android PCAP)が公開されている@<bib>{url_android_pcap}
#@#   ** タッチUIからキャプチャを操作可能
#@#   ** ソースが公開されており、自前ビルドが可能
#@# 
#@# ====[notoc] cons
#@#   * 2.4GHz 802.11 b/g のみ対応のデバイスしかサポートしていない
#@#   ** オンボードのデバイスではなく USB OTG ケーブルで接続したデバイスを利用のため
#@#   ** 対応ドライバが RTL8187 のみ (日本では流通していないチップ, デバイス)
#@#   * アプリの開発が3年ストップしている
#@#   * USB OTG ケーブルがポートを占有するため充電しながらキャプチャができない(Nexus 7で5時間程度)
#@# 
#@# 上記の通りコードは公開されているため、気力さえあれば新規デバイス向けドライバの追加は可能です。ただし、C ではなく Java で書く必要があります。
#@# 
#@# ===[notoc] 2. Cubieboard2
#@# ====[notoc] pros
#@#   * Raspberry Pi 1 より性能がいい
#@#   * シリアルのピンが分かりやすい
#@# ====[notoc] cons
#@#   * Raspberry Pi より高額(8000〜10000円)
#@#   * Raspi2以降はコア数、Raspi3以降はクロックでも負けている
#@#   * GPIO のピッチ変換アダプタが必要
#@# 
#@# ===[notoc] SolidRun社 HummingBoard-i2eX
#@# ====[notoc] pros
#@#   * 高機能な Raspberry Pi もどきのため物理形状は Raspberry Pi 1 Model B とほぼ同じ
#@#   * Mini PCIe デバイスを挿せる
#@#   ** ath10k デバイスを用いて 802.11ac や 3x3 MIMO のキャプチャができる
#@#   ** ath9k デバイスを用いて簡易スペクトラムアナライザ機能が使える
#@#   ** 利得の高いアンテナの利用できる (U.FL to RP-SMA変換)
#@#   * RTC がオンボードで付属
#@#   * 日本国内では Petapicoshop が取り扱っており amazon でも購入可能
#@# 
#@# ====[notoc] cons
#@#   * 高い (17000〜20000円)
#@#   * Raspberry Pi 3 でクロックを抜かれた
#@#   ** コア数も Raspberry Pi 3 がクワッドに対してデュアルしかない
#@#   * ユーザのドキュメントがあまりない
#@#   * MiniPCIe デバイスを駆動させた時に電力が足りるのか未検証
#@#   * (個人の感想: Raspberry Pi 2 と比べてももっさりしてる印象)
#@# 
#@# 後継機としてメモリが 2GB、最大 4コアになった HummingBoard Pro が
#@# 販売されています。ただし価格は i2eX よりさらに高く2万円前半台程度になっています。
#@# 
#@# ===[notoc] OpenWRT化したAP (Buffalo WZR-HP-AG300H など)
#@# ====[notoc] pros
#@#   * APグレードの無線LANチップが利用できる (2.4GHz: AR9223, 5GHz: AR9220)
#@#   * 2.4/5GHz帯をそれぞれ独立にキャプチャできるかも
#@#   * 中古なら 2000 円台程度から流れており安い
#@# ====[notoc] cons
#@#   * 全体的に未検証
#@#   * 12V/2.0Aが必要なため電源のための工作が必要
#@#   ** シールドバッテリー
#@#   ** Quick Chage 対応モバイルバッテリーから 12V を引き出す @<bib>{url_qc_12v}
#@#   * 内蔵ストレージが圧倒的に少ない (32MB)
#@#   ** あまり巨大なパッケージは入れられない
#@#   ** キャプチャデータは USB メモリに逃がす必要がある
#@#   * 操作系UIの追加方法要検討 (USB ディスプレイ, シリアルonlyなど)


== PiBakery を用いたセットアップの簡単化

新しく買ってきた Raspberry Pi に毎々手で、キャプチャ箱としてのセットアップを施すのは手間です。
キャプチャ箱のセットアップには以下に挙げる作業が必要です。


  * ベースのシステム設定: ユーザ、パスワード、IPアドレスなど
  * キャプチャに必要な各種パッケージのインストール
  * ディスプレイ(PiTFT)と Kiosk モードのセットアップ
  * キャプチャ環境の導入と立ち上げ
  * 3Gモバイルデバイスの有効化と時刻同期の設定

これらを完了させたセットアップ済みの SD カードイメージを用意しておく、というのも一つの手ですが
ここでは PiBakery@<fn>{fn_pibakery} を使った構築を行います。
PiBakery は GUI で機能ブロックを組み合わせることで、初回起動時または2回目以降の起動時に走らせたい
処理を記述することができます(@<img>{pibakery_scr})。そしてこれを Raspbian のイメージと一緒に SD カードに
書き込んでくれるツールです。
パスワードの設定やブートオプションの変更からパッケージのインストール、コマンドの実行、
Wi-Fi 接続情報の設定や再起動といった処理が用意されています。

//footnote[fn_pibakery][PiBakery http://www.pibakery.org]

//image[pibakery_scr][PiBakery を用いたイメージ作成][scale=0.8]

PiBakery にてキャプチャ箱用のイメージを作るレシピ(XMLファイル)は github の
enukane/pi-panopticon-builder @<fn>{fn_panopticon_setup} にて公開しています。
この中では初回起動時に以下の処理を走らせています。
//footnote[fn_panopticon_setup][enukane/pi-panopticon-builder https://github.com/enukane/pi-panopticon-builder]

  1. ホスト名の変更
  2. pi ユーザのパスワードを変更
  3. コンソールへの自動ログインを有効化 (後述する Kiosk モード有効化のため)
  4. 同一リポジトリ内の install.sh スクリプトをダウンロード
  5. install.sh にタイムゾーン、IPアドレス、ネットマスクを設定してセットアップ開始
  6. 再起動

1, 2, 5 において設定しているホスト名、パスワード、タイムゾーン、静的IPアドレス、ネットマスクは、
PiBakery 上で書き換えて機器毎に変えることを想定しています。それ以外の共通の処理は
基本的には install.sh スクリプトの中で一通り行われるようになっています。
セットアップには10分ほどかかります。終了後自動的に再起動し、
導入したツールを立ち上げた上でPiTFTの画面にWebUIが表示されるようになっています。

#@# PiBakery で書き込んだ Raspbian はデフォルトのイメージ同様に DHCP でアドレスを
#@# 取得します。パラメータとして渡した静的IPアドレスはセットアップが完了し再起動した後に
#@# 有効になります。デバッグ目的でコンソールを取りたい場合は、当該 Raspberry Pi が取得した
#@# アドレスを探すか、GPIOピンからシリアル接続を行う必要があります。
#@# 
#@# PiBakery 利用の注意点として、"Run Command" を root ユーザとして実行したい場合は
#@# PiBakery の 0.3.0 以降を使うようにしましょう。0.2.X 系ではこのブロックの結果吐き出される
#@# シェルスクリプトで exec を用いているという問題がありました。
#@# exec 先のスクリプトやコマンドが exit するとセットアップ全体が止まってしまうため、
#@# root 権限でコマンドを実行したい場合は pi ユーザとして sudo するしかないようです。
#@# 0.3.0 以降では直っているようなので上手くいかない場合は PiBakery 自体のアップデートを推奨します。
#@# Mac OS X の場合、PiBakery.app 内の以下のパスにあるスクリプトで exec が利用されていたらアウトです。
#@# 
#@# //cmd{
#@# Contents/Resources/app/pibakery-blocks/runcommand/runCommand.sh
#@# //}


== 画面

#@#概要
操作ユーザインタフェースは GPIO 経由で利用可能なディスプレイに、
Webブラウザだけを立ち上げて全画面でWebUIを表示することで実現しています。

#@# //image[pitft_panopticon][PiTFTを使ったユーザインタフェース][scale=0.5]

=== ディスプレイ(LCD)デバイス

ディスプレイデバイスには Adafruit の 2.8 インチ PiTFT (320x240)を用いています。
このデバイスの利点は以下の三点です。一つ目に GPIO から入力および給電が可能で追加のケーブルが不要です。
サイズもちょうど Raspberry Pi 本体と同じくらいであるためコンパクトに収まります。
二つ目にインストール手順が公式サイト@<fn>{fn_pitft_setup}によくまとまっており簡単に導入が可能です。
三つ目に PiTFT の裏側にGPIO用の端子が生えているため、画面を使いつつ同時に
GPIO を利用することができます。

//footnote[fn_pitft_setup][Easy Install 参照 https://learn.adafruit.com/adafruit-2-8-pitft-capacitive-touch/]


PiTFT は 5000 円程度(2016/12月現在)ですが、より低価格(2000〜4000円程度)の
類型品も存在します。多くは裏に GPIO が生えていなかったり、ドライバの導入が面倒だったりしますが
これらを利用することも可能です。

//image[lcd_pitft_spotpear][PiTFT 2.8インチ と SpotPear 3.2 インチの裏側][scale=0.5]

GPIO以外から入力できるデバイスとして USB、HDMI やリボンケーブル端子を用いた
デバイス(公式ディスプレイ)が存在します。これらは比較的高額であること(8000円以上)、
電源が別に必要な場合が多いこと、7インチ以上の中型が多くかさばること、
ディスプレイアダプタボードが追加で必要な場合がありさらに嵩が増えること、
後述する Wi-Fi アダプタや3Gモデムと設置スペースや電力供給的に競合することなどから現状では対象外としました。



=== 操作用ユーザインタフェース

操作インタフェースは WebUI ベースにしています。
起動時に以下の様に Midori ブラウザを立ち上げ特定の URL を全画面表示しています。
この向け先として、後述するキャプチャエンジンが提供している Web サーバの URL を指定しています。

//cmd{
# スクリーンセーバーや省電力機能は全てオフ
xset -dpms
xset s off

# matchbox でウィンドウを1つに制限
matchbox-window-manager &

# Midori ブラウザで WebUI をフルスクリーン表示
midori -e Fullscreen -a http://localhost:8080
//}

WebUI では現在時刻、メモリ・CPU・ディスク容量などの基本情報とともに
キャプチャ中のファイル情報、現在のチャネルやエアタイム使用率などを表示しています(@<img>{panopticon_webui})。
キャプチャの操作は中程にあるボタンより行います。下部には Channel Utilization として
各チャネルの使用率を表示し、現在の環境でどれくらい空間がビジーかを
見えるようにしています。

//image[panopticon_webui][キャプチャ箱のWeb UI][scale=0.75]

以前の薄い本(2015版)で紹介した際には SDL で画面を描画し、PiTFT のボタンを
用いてキャプチャの開始、停止などを操作するようにしていました(@<img>{tochka-miniui})。
物理ボタンを用いることで、ディスプレイを消灯したりといったことができましたが、
UIの作り込みや変更コストが大きいため今回からは HTML + JavaScript にて実装するようにしました。

//image[tochka-miniui][以前(tochka)の SDL ベースのUI][scale=0.65]

== Wi-Fi アダプタの選択

市場に出回っている無線LANデバイスはインタフェースひとつをとっても USB、PCIe、e.t.c とバリエーションも様々です。
使うボードにより選択できるものは変わってきますが、一般的に PCIe のそれが一番高機能かつ高性能です。
今回は Raspberry Pi を使うため USB Wi-Fi アダプとして最適なものを探す必要があります。

  * 必須要件
  ** Monitor モードをサポートしておりキャプチャができること
  ** Linux に標準でドライバが含まれていること
  ** 2.4/5GHz 両対応 (1-13, W52, W53, W56)
  * 努力目標
  ** 上位の規格に対応していること (802.11n, 802.11ac, 多ストリーム)
  ** サポートしてるチャネルが広いこと
  ** アンテナが高利得であることまたは差し替えできること

そもそもドライバがなく挿してもインタフェースが生えてこない、Monitor モードに入れない
というのがざらにあるため wikidevi で型番からチップ名を引き出しつつ Linux のコードを見つつ、
あるいは実際に買って挿してみて使えるものを探していく必要があります。
なお、残念ながら Raspberry Pi 3 にオンボードで搭載されている無線LANデバイスは
2.4 GHz のみ対応かつ Monitor モードにはいれません。


今のところ 802.11n (2.4/5GHz両方) 以上でキャプチャができ、日本国内でも出回っている
デバイスで、Linuxのメインラインに入っているドライバとしては以下が挙げられます。

  * rt2800usb : Ralink 社製のチップ向けドライバ
  * carl9170h : Atheros 社製のチップ
  * ath9k_htc : 同上

本書のキャプチャ箱では rt2800usb がサポートする WI-U2-300D を用いています。

=== rt2800usb

このドライバの利点はなんと言っても対応デバイスが入手しやすく安いことです。
Buffalo から2016年12月現在でも現行モデルである WI-U2-300D (中身はRT5572)がそこそこお安く 2000〜3000円程度で出ています。
一世代前の旧型として RT2870 チップを使った WLP-UC-AG300や WLI-UC-AG300N などがあります。

チャネルの幅も広く、2.4GHz 帯や W52, W53, W56 の日本で利用できる周波数帯全般に加え
W58 (149-165ch) もサポートしています。例外として旧J52の34chだけはサポートされていませんがあまり問題はないでしょう。

このデバイスは基本的に内部アンテナで動作するモデルですが、海外では
Alfa AQUS051NH といった RP-SMA でアンテナを挿せる機器もあります。
こちらの価格は5000円程度と割高にはなりますが、より感度良くキャプチャをするのには
使えるかもしれません。

=== carl9170
#@# https://wikidevi.com/wiki/Carl9170

carl9170 は Ateros 社の AR9170 をサポートするドライバです。このチップは
商用のキャプチャ・解析ソフト向けにも出荷されている推奨デバイスにも使われています。
たとえば Airmagnet とセットで用いられる Proxim ORiNOCO 8494 や、
Windows での 802.11 フレームキャプチャ製品である AirpcapNX がこれに該当します。

日本国内では NEC Aterm WL300NU-AG がこのチップを搭載し、802.11 a/b/g/n をサポート
しています。定価10000円程度ですが、販売終了品のため新品・中古品が3000円ぐらいで見つかります。

サポートしてるチャネルは以下の範囲となります。このデバイスの特徴として
802.11j で導入された 4.9GHz 帯と 5.03GHz 帯をサポートしているという点が挙げられます。
どこまできちんと動くのか検証できていませんが、
802.11j で動作している長距離無線LANシステムの普及具合などが調査できるかもしれません。

  * W52, W53, W36 はサポート、W58 は非サポート
  ** W52 のうち、チャネル 34 は非サポート (rt2800usb と同じ)
  * 802.11j でサポートされる 4.9, 5.03GHz帯をサポート
  ** 4.9 GHz帯: チャネル 184, 188, 192, 196
  ** 5.03 GHz帯: 8 (5040MHz), 12 (5060MHz), 16 (5080MHz)

注意点として、このデバイスは 802.11 Draft n 時点の規格に準拠したものです。
このためかは分かりませんが、Linux 標準のドライバでは802.11n の機能を用いているフレームの
キャプチャにあたり制約が存在します。
Short Guard Interval や HT Greenfield Mode を用いて送信されたフレームや、
Block Ack フレームなどがゴミデータとして見えるかキャプチャ自体ができない場合があります@<fn>{fn_riverbed}@<fn>{fn_toyo}。
Greenfield モードについては、雑多なAPが混在しうるイベント無線LAN環境であれば
基本的には問題ないことが多いでしょう。旧規格との共存のため Legacy / Mixed Mode にて
動作してくれる場合が多いと思われます。
ただし Short Guard Interval や Block Ack は一般的に使われている仕様です。
何らか状況判定に使える可能性もあるためできるだけ拾って欲しいものです。

#@# このため rt2800usb に比べれば carl9170 は見劣りしてしまいます。
#@# Packet Injection などは可能なため、aircrack-ng などで遊ぶのには
#@# 良いデバイスではあります。

//footnote[fn_riverbed][https://splash.riverbed.com/thread/4342]
//footnote[fn_toyo][http://www.toyo.co.jp/ict/contents/detail/id=8111]

=== ath9k_htc
#@# https://wikidevi.com/wiki/Ath9k_htc

ath9k_htc は前節と同じく Atheros 社製品向けドライバで、AR9280やAR9271などといった
PCIe向けとしてPCやアクセスポイント製品でも一部用いられているチップを載せたデバイスをサポートしています。
USB ターゲット用のSoCが入っているため、全く同じ
ように使えるわけではありませんが同程度の機能性を提供しています。
サポートしているチャネル幅は W52, W53, W56 となっており carl9170 にて対応していた
4.9 GHz帯等がなくなっています。

carl9170 と同じく AR9280 チップも Draft n までの対応ですが、Block Ack フレームについては
キャプチャできるようになっています。ただし Short Guard Interval のフレームについては
ひきつづき受信していないかその情報をマスクしてしまっているようです。
そのためか 802.11n の高レートなフレームを取りこぼしているような挙動を示しています。

また、このドライバのデバイスでは iw survey dump コマンドがサポートされていません。
その代わりに spectral_scan いわゆるスペクトラムアナライザ相当の機能がサポートされています。

これまでに挙げたドライバの中で、ath9k_htc のみでサポートされている機能として、
マイクロ秒精度でのパケット受信時刻が記録されるようになっているというのがあります。
無線LANでは、各デバイスにてタイミング制御のため 64 bit幅のマイクロ秒単位のカウンタを管理しています。
このカウンタに基づいた受信時刻が受信フレームの Radiotap ヘッダの mactime 経由で取得できるようになっています。


このチップを搭載したデバイスとして、国内ではこれまた Buffalo が WLI-UV-AG300 を提供しています。
こちらも販売終了品です。元々はテレビを無線LANに接続するためのデバイス、という位置づけで販売
されていたようです。SONY と Panasonic に OEM しているのかメーカー名が違いますが筐体はほぼ一緒、
型番末尾に @<strong>{P} か @<strong>{S} がくっついたものや、型番は SONY UWA-BR100 とまるっきり違いますが
筐体は同じという BRAVIA 用のものなんかも出回っています。
基本的にはテレビの無線LAN対応向けという背景もあってか、全体的にお高い価格帯です。
P, S 付きのものは中古でも5000円以上、ものによっては1万円以上と高めです。
まれに Buffalo 製のが3000円ぐらいで流れてきます。


=== で 802.11ac は？ 3x3 MIMO は？

これまでに挙げてきたデバイスは、802.11 n で 2x2 MIMO まで対応したデバイスです。
今のところ標準の Raspbian で 802.11ac のキャプチャが出来るUSBデバイスは見つかっていません。

Omnipeek では NetGear の A6210-100JPS や IO-DATA の WN-AC433UK などの 802.11ac 対応デバイスにて
キャプチャが可能ですが、これはソフトウェア製品に付随する特製ドライバによって可能となっています。
LinuxのメインラインカーネルにはこれらMediatek社製チップ向けドライバはまだ導入されていません。
ベンダにてドライバを配布していますが、それもステーションモードのみ(mt7612u_sta)しか提供されていません。

Realtek社から出ているドライバに手を入れて RTL8812AUチップを積んだデバイスで Monitor モードが
有効にできた、という事例が何件かあるようです@<fn>{fn_rtl8812au}。
ドライバのコンパイルが必要なため検証はできていませんが、これが上手く動くと
以下のデバイスで 3x3 以上や 802.11ac でサポートされるフレームのキャプチャが
できるようになるかもしれません。

//footnote[fn_rtl8812au][http://palshack.org/monitor-mode-with-alfa-ac1200-rtl8812au/]

  * Buffalo WI-U3-866D
  * エレコム WDC-867U3
  * NEC Aterm WL900U
  * Planex GW-900D

いずれの場合もMIMO という技術の特性上、あるフレームの送り先でないデバイスで
正確にフレームを受信するのはたいていの場合困難です。MIMO はアンテナを相互に1本以上使って
間の伝送路を考慮した上で最適な信号で通信を行う技術です。
伝送路がちょっと違う、場所がちょっと違っているというそれだけで正常に受信できなくなることもあります。
キャプチャ箱としてはこういったフレームを可能な限り採れる方法を探しつつも、
技術的制約としてこれを踏まえた上で別の情報から補完していく方が良さそうです。


== キャプチャデーモン

キャプチャデーモンはユーザからのリクエストに応じて、キャプチャを実際に
行うコンポーネントです。以下に列挙するタスクを実施します。
単純には tshark を立ち上げ、キャプチャをさせ、必要に応じて落とすというのがメインの機能になります。

  * 指定された USB Wi-Fi アダプタを Monitor モードに切り替える
  * WebUI からのリクエストに応じてキャプチャの開始・停止を制御する
  * 一定時間(1秒)毎にチャネルを切り替える
  ** チャネル変更に失敗したチャネルはブラックリストに追加し以降の利用を避ける
  ** 切り替え時に現在のチャネルのチャネル使用率をログに記録する

Linux にて、Wi-Fi インタフェースをキャプチャ可能な状態にするには以下のコマンドを実行します。

//cmd{
# モード変更のためインタフェースを一度 DOWN にする
% ip link set wlan0 down

# wlan0 を Monitor モードに設定、以下のフレームも受信するよう設定
#  - FCSエラーのフレーム
#  - 他のAP行きのフレーム
#  - Control フレーム
% iw wlan0 set monitor fcsfail otherbss control

# インタフェースを一度 UP にする (後述するチャネル設定のため)
% ip link set wlan0 up

# パケットキャプチャを行うチャネルを設定する(初期値は 1)
# インタフェースが UP でないとチャネル変更できないことに注意
% iw wlan0 set channel 1
//}

実際のキャプチャを行う tshark にわたす引数は以下の通り pcapng タイプを
指定する以外には特別な設定はしていません。

//cmd{
% tshark -i #{@ifname} -F pcapng -w ${毎回生成される保存先パス}
//}

先に述べたとおり、チャネル変更はインタフェースが UP の時に行う必要があります。
UP であれば tshark を実行してキャプチャを行ってる最中でも可能です。
このため、デーモンは裏で1秒毎にチャネルを変更させるようにしています。
舐めるチャネルは@<list>{panopticon_channel_list}に挙げた41チャネル分となっています。
単純計算で1周するのに41秒かかります。実際には、遷移に失敗したチャネルを
ブラックリスト行きにするためもう少し短くなります。

//list[panopticon_channel_list][キャプチャ対象チャネル一覧]{
    CHAN = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            34, 36, 38, 40, 42, 44, 46, 48,
            52, 56, 60, 64,
            100, 104, 108, 112, 116,
            120, 124, 128, 132, 136, 140,
            149, 153, 157, 161, 165]
//}


チャネル変更の際に、チャネル使用率の取得も併せて行っています。
一部の Wi-Fi デバイスでは iw survey dump コマンドで
アクティブ時間(チャネルを見ていた時間)とビジー時間
(閾値の強度以上の信号を受信していた時間)を取得できます(@<list>{iw_survey_dump})。
これを用いることで、そのチャネルで1秒間キャプチャしていた時に
どれくらいの電波が飛び交っていたかを時間の割合で計算できます。
以下の例だと、 5983 / 27255 つまり一定時間中の約 22% は電波を受信していた
計算になります。この割合が高ければ高いほど、チャネルに空きがないことを示しています。
ただしこの割合はあくまで「なにか」の電波を受信していた時間割合です。
正常な802.11フレームかもしれませんし、壊れた802.11フレームかもしれませんし、
はたまた Bluetooth や電子レンジなどの干渉波かもしれません。
スペクトラムアナライザ同様に、内訳については別の情報で切り分ける必要があります。

//list[iw_survey_dump][iw wlan0 survey dump]{
% iw wlan0 survey dump
Survey data from wlan0
	frequency:			2412 MHz [in use]
	channel active time:		27255 ms
	channel busy time:		5983 ms
	extension channel busy time:	0 ms
//}

いずれにせよ、キャプチャしたフレームとつきあわせて何らかの知見が得られると期待して、
また単純にチャネルの混雑率を見るのに良い指標であるため @<list>{panopticon_util_log}
に例示したようにログにチャネル情報とともに残す様にしています。

//list[panopticon_util_log][/var/log/panopticond.log: チャネル使用率のログ出力例]{
moved to 2 from 1 (dur=3434, size=270572536, walk=3197, utilization=80.35 uch=1)
moved to 3 from 2 (dur=3435, size=270596300, walk=3198, utilization=47.27 uch=2)
moved to 4 from 3 (dur=3437, size=270625516, walk=3199, utilization=32.84 uch=3)
moved to 5 from 4 (dur=3438, size=270642780, walk=3200, utilization=30.64 uch=4)
//}

== 時刻源

パケットキャプチャにあたっては時刻源も必要です。
現状、このキャプチャ箱では USB 3G/LTE デバイス経由で
NTPを用いた時刻同期を行っています。これ以外にも様々な手段があり、
用途に応じて時刻源に求める精度は変わってきます。

=== 時刻の用途

単純には、キャプチャしたフレームがどのイベントのいつ頃のものなのかを
記録しておきたいという目的があります。この場合は、分程度までの精度が
あれば要求を満たせるでしょう。秒単位でずれていたとしても、フレームの順序関係
が崩れなければ問題はありません。

もう少し高度には、フレームの受信時刻を正確に取得できると時間占有率が計算できる
という使い方もあります。radiotapヘッダ付きの802.11 フレームにはマイクロ秒単位で
転送にかかった時間が記録されています。これとチャネル使用率を合わせることで、
キャプチャ精度の検証や見えないフレームの割合算出などが可能となります。

グローバルに時刻が精度良く取れる場合、複数台キャプチャ環境にこの時刻源を
適用できます。これにmactimeを組み合わせれば、複数デバイスでキャプチャしたパケット列を
ある程度正確に順序関係を保ったままマージすることができます。
またナノ秒単位でこれが行える場合、受信時刻から送信端末のおおざっぱな位置・距離計測も
可能でしょう。


=== NTP (+ 3G/LTE)

PiBakery で作成される Raspbian イメージでは NTP による時刻同期が
デフォルトで有効になっています。このためインターネットに疎通さえあれば
勝手に時刻は補正されていきます。イベント会場の環境でこれを有効にするのに
3G/LTE デバイスを使っています。


IoT デバイスなどのあまり通信量の多くないデバイス向けに SORACOM Air や
nuromobile 0SIM などのサービスがあります。また MVNO 各社によるいわゆる
格安 SIM サービスではデータ通信のみが可能な SIM カードを複数枚発行することが
できます。これらのサービスと契約してキャプチャ箱用のデータ通信用 SIM を手に入れることもできます。
このキャプチャ箱では SORACOM Air の SIM を用いています。


3G/LTE モジュールとしてよく Raspberry Pi と併せて使われているのは
LG エレクトロニクスの L-02C でしょう。中古品が秋葉原で3000円以下程度手に入ります。
本キャプチャ箱でもこれを用いています。
別の選択肢として 3GPI@<fn>{fn_3gpi} や 3GIM@<fn>{fn_3gim} などがあります。
これらはお値段がかなり高いこと、前者については電源の工作が必要である
ことから対象外としました。

//footnote[fn_3gpi][http://www.mechatrax.com/products/3gpi]
//footnote[fn_3gim][http://tabrain.jp/service3gim.html]

L-02C + SORACM Air のセットアップは先に挙げた PiBakery でのインストールスクリプトにて
行われます。起動時に wvdial を立ち上げ 3G/LTE の PPP 接続を行います。
定期的にリンクをチェックするようになっており、ppp0 がリンクダウンまたは
なくなった場合は再接続を行います。時刻同期は ntp ではなく ntpdate を定期的に
走らせることで行うようにしています。


セットアップ時の注意点として、L-02C は事前に USB モデムとして認識されるように
設定をしておく必要があります@<fn>{fn_l02c_usbmodem}。
キャプチャ箱の実機でなくても可能なため、買ってきたら手元の PC で設定を投入して
おくと良いでしょう。

//footnote[fn_l02c_usbmodem][http://trtr.hatenablog.jp/entry/2014/11/27/011913]

=== RTC (リアルタイムクロック)

Raspberry Pi 向けに GPIO に挿して利用するタイプの各種 RTC が販売されています。

このデバイスのメリットはまず安いことです。
デバイスが1000円以下程度で出ている事に加え、運用にあたり追加コストが不要です。
キャプチャデバイスと競合するUSBの電力も利用せず、運用時には通信の必要がないため
他の方法に比べて通信デバイスを載せなくて良いという利点があります。
またPiTFTの裏側、Raspberr Pi本体との間に収まるため余計なスペースもとりません。

//image[pitft_rtc][RTC on PiTFT: 写真手前から Raspberry Pi 本体と同じピン配置で利用可能][scale=0.5]

デメリットとしてまず上げられるのは、RTC の補正が必要な点です。ものによっては1日で
十数〜数十秒ずれるため定期的にNTPで補正を掛ける作業が必要です。
運用中に補正を掛けられない場合、個体差に応じてずれ幅が異なるため
複数台環境には向いていなさそうです。
また上記ではPiTFTの裏側に挿すとしましたが、ディスプレイ側でGPIOを占有しない or
GPIOをブリッジしているデバイスを選ぶ必要があります。

=== GPS

GPS デバイスを時刻源として用いることも可能です。

この方法のメリットは屋外であればどこでも取れる点です。
3G 利用時のように通信デバイスは不要ですし通信コストもかかりません。
GPSによる時刻同期が最も有効なのは複数台環境で用いる場合でしょう。
上手く利用すればグローバルに時刻同期が可能です。精度はデバイスの作り方や
環境次第ですが、上手く組むとサブミリ秒も行けるようなので分散環境には適していそうです。


デメリットは屋内で使えない場合が多いという点です。測ったところ自宅の集合住宅(最上階、軽量鉄骨)では
ギリギリ入るか入らないかといった状況、某オフィスビル内はNG、コミケ会場である
ビッグサイトももちろんNGでした。ビッグサイトのようなコンクリの棺桶みたいな構造物はともかく
一面ガラス張りの建物でも、最近は窓に金属膜を挟み込んで断熱・遮熱を行っている場合があります。
これにより事実上、簡単な電波暗室として作用してしまい窓際でも GPS の信号が上手く入らない場合が多いようです。

時刻を取得するだけであれば、いったん外に出てしばらく待つというのも有効でしょう。
早くて数分、遅くて十数分程度でとりあえずの時刻合わせはできます。
ただしその後室内で運用する場合は、補正する手段がありません。


Raspbian 標準の ntpd で GPS をソースとして運用するにはいくつか注意すべき点があります。
まず PPS 無しの USB GPS デバイス単体では ntpd で時刻同期できないという問題が
あります。ntpd は時刻源が 2つ以上有効でしないとソースとして採用しくれないようです。
そもそも、インターネット接続がない環境では NTP サーバにリーチできないがために GPS のみで
運用しようとしているのでこれでは本末転倒です。これを回避するには ntpd ではなく chrony を利用する必要
があります。その際には@<list>{GPS_time_chrony_conf}に上げるような設定を追加する
必要があります。

//list[GPS_time_chrony_conf][GPS利用を利用した時刻同期: chrony.conf への追加項目]{
# gpsd から時刻を取得 (offset と delay はてきとう)
refclock SHM 0 offset 0.420 delay 0.2 refid GPS

# makestep <threshold> <limit>
#
# threshold 以上のズレがある場合、limit 回まで時刻を強制的に調整するようにしておく。
# GPS のみを利用した場合、時刻が盛大にずれた状態で始まることが多い。
# この設定で、GPSが渡してくる時刻まで漸次的にでは無く一気に補正する。
# 同様の機能として initstepslew があるが、そちらは NTP 専用なので使わない。
makestep 10 3
//}

#@# http://nyanchew.com/jp/gps%E3%81%AEpps%E4%BF%A1%E5%8F%B7%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F-stratum-1-ntp%E3%82%B5%E3%83%BC%E3%83%90%E3%81%AE%E4%BD%9C%E3%82%8A%E6%96%B9

屋内であまり使えない問題については Assisted GPS いわゆる u-blox 社の AssistNow
の Offline 版にて改善できる可能性があります。
